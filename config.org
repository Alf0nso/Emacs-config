* Packages & Terminals
** Packages & Additions
*** Personal Functions
    Some functions that I have been
    building with emacs lisp, that
    can and do facilitate my life!

    #+begin_src emacs-lisp
    (load "~/.emacs.d/lisp/custom.el")
    #+end_src
*** Turn Off Emacs

    #+begin_src emacs-lisp
      (defun EmacsOff ()
	(interactive)
	(let ((last-nonmenu-event nil))(save-buffers-kill-emacs)))
    #+end_src

*** Restart Emacs

    #+begin_src emacs-lisp
      (defun EmacsRestart ()
	"Kills and Restarts Emacs Server"
	(interactive)
	(let ((proc (start-process "StartEmacsServer.bat" nil "StartEmacsServer"))))
	(EmacsOff))
    #+end_src

*** Iscroll
    Smooth scrolling for images on files
    and other places.

    #+begin_src emacs-lisp
    (load "~/.emacs.d/lisp/iscroll.el")
    #+end_src

*** Ido
    Ido is a better finder for commands
    like 'C-c k' (which in my config is
    the deleting combo), or for 'C-x b'.

    #+begin_src emacs-lisp
      (ido-mode t)
      (setq ido-everywhere t)
      (setq ido-enable-flex-matching t)
      (setq ido-separator "\n")
    #+end_src

*** Smex
    Smex is just like Ido, but
    specific for the 'M-x (...)'
    command.
    
    #+begin_src emacs-lisp
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
      (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
    #+end_src

*** Helm

    I'm still thinking about switching to Helm, but for now
    I still prefer Ido and smex. Helm is just too much, and
    too much color by default. It's alright, I think... but
    it's a little bit too much for me.

    #+begin_src emacs-lisp
      ;; (helm-mode 1)
      ;; (global-set-key (kbd "M-x") #'helm-M-x)
      ;; (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
      ;; (global-set-key (kbd "C-x C-f") #'helm-find-files)
      ;; 
      ;; (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      ;; (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
      ;; (define-key helm-map (kbd "C-z")  'helm-select-action)
    #+end_src

*** Which Key Package
    Which Key allows me to know
    the commands available after
    I press any key.

    #+begin_src emacs-lisp
      (use-package which-key
	:ensure t
	:config (which-key-mode))
    #+end_src

*** Pdf Tools
    Package which is still not
    very well integrated with
    windows. But it's possible
    to compile the program and
    use it to read pdf's without
    converting them to an image.

    #+begin_src emacs-lisp
    (pdf-loader-install)
    #+end_src

*** Spell Check
    Spell Check here on Emacs for windows
    is done with an external program called
    'hunspell'. I had to find and get the
    respective binaries, I should get
    hunespell's Portuguese and German dictionaries
    as well.
    
    #+begin_src emacs-lisp
      (setq ispell-program-name
	    "C:/hunspell/bin/hunspell.exe")
      (global-set-key (kbd "C-<f8>")
		      'flyspell-check-previous-highlighted-word)
    #+end_src

*** Auto Complete
    Auto complete tool, very good
    one.

    #+begin_src emacs-lisp
      (use-package auto-complete
	:ensure t
	)
    #+end_src

*** Yasnippet
    
    #+begin_src emacs-lisp
    (yas-global-mode 1)
    #+end_src

*** Company Mode
    #+begin_src emacs-lisp
      ;; Company-mode
      ; No delay in showing suggestions.
      (setq company-idle-delay 0)

      ; Show suggestions after entering one character.
      (setq company-minimum-prefix-length 1)

      ; go back up in the end
      (setq company-selection-wrap-around t)

      ; Use tab key to cycle through suggestions.
      ; ('tng' means 'tab and go')
      (company-tng-configure-default)

      (defun tab-indent-or-complete ()
	(interactive)
	(if (minibufferp)
	    (minibuffer-complete)
	  (if (or (not yas-minor-mode)
		  (null (do-yas-expand)))
	      (if (check-expansion)
		  (company-complete-common)
		(indent-for-tab-command)))))

      (global-set-key [backtab] 'tab-indent-or-complete)
    #+end_src

*** Subtree

    Subtree package for folding and
    unfolding directories in dired
    mode.

    #+begin_src emacs-lisp
      (use-package dired-subtree
	:ensure t
	:bind (:map dired-mode-map
		    ("i" . dired-subtree-insert)
		    (";" . dired-subtree-remove)
		    ("<tab>" . dired-subtree-toggle)
		    ("<backtab>" . dired-subtree-cycle)))
    #+end_src
    
*** Org
    
    All my org related configurations
    go in here. Some packages and some
    interesting things going on.
    
**** Org-bullets

     Org-bullets are only because I do
     find the regular org asterisks a
     bit boring.

     #+begin_src emacs-lisp
       (use-package org-bullets
	 :ensure t
	 :init
	 (setq org-bullets-bullet-list
	       '("◉" "∴" "➞" "➵" "➾"))
	 (setq org-todo-keywords 
	 '((sequence "☛ TODO(t)" "➤ NEXT(n)" "|" "✔ DONE(d)")
	 (sequence "∞ WAITING(w)" "|"  "✘ CANCELED(c)")
	 (sequence "∞ READING(r)" "∞ VIEWING(v)" "|"  "◤ FINISHED(f)")))
	 :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     #+end_src

**** Org Babel

     Allows for very nice source code
     in my notes.

     #+begin_src emacs-lisp
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((sparql . t)
	  (R . t)
	  (python . t)
	  (C . t)
	  (dot . t)
	  (java . t)
	  (lisp . t)
	  (shell . t)
	  (prolog . t)))
     #+end_src

**** Org Tempo

     specifications of the source code
     block headers

     #+begin_src emacs-lisp
       (require 'org-tempo)
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("py" . "src python :results output :exports both"))
       (add-to-list 'org-structure-template-alist '("pyp" . "src python :session :results output :exports both"))
       (add-to-list 'org-structure-template-alist '("cp" . "src C"))
       (add-to-list 'org-structure-template-alist '("ja" . "src java :results output"))
       (add-to-list 'org-structure-template-alist '("sp" . "src sparql"))
       (add-to-list 'org-structure-template-alist '("dt" . "src dot"))
       (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
       (add-to-list 'org-structure-template-alist '("pr" . "src prolog"))
     #+end_src

**** Org Tags

     #+begin_src emacs-lisp
       (setq org-tag-alist '((:startgroup . nil)
			     ("@University" . ?u) ("@Personal" . ?p)
			     ("@Band" . ?m)
			     (:endgroup . nil)
			     (:startgroup . nil)
			     ("Study" . ?s) ("Leisure" . ?l)
			     ("Work" . ?w)
			     (:endgroup . nil)
			     (:startgroup . nil)
			     ("Books" . ?B) ("Films" . ?F)
			     ("Series" . ?S) ("Anime" . ?A)
			     ("Music" . ?m)
			     (:endgroup . nil)
			     ))
     #+end_src

**** No Evaluation Prompt

     Removing the evaluation prompt for
     some of the source blocks

     #+begin_src emacs-lisp
       (defun ck/org-confirm-babel-evaluate (lang body)
	 (not (or (string= lang "latex") (string= lang "python")
		  (string= lang "sparql") (string= lang "emacs-lisp")
		  (string= lang "lisp") (string= lang "dot"))))
       (setq org-confirm-babel-evaluate 'ck/org-confirm-babel-evaluate)
     #+end_src

**** Set Org Agenda

     Not just Org Agenda but also generally related settings.

***** Org Agenda
      
      Org agenda files, and key rebinding

     #+begin_src emacs-lisp
       (setq org-agenda-files '("~/Org/University.org"
				"~/Org/Personal.org"
				"~/Org/Birthdays.org"))
       (global-set-key (kbd "C-c a") 'org-agenda)
       (setq org-refile-targets
	     '(("~/Org/University.org" :maxlevel . 2)
	       ("~/Org/Personal.org" :maxlevel . 1)))
     #+end_src

     #+RESULTS:
     : ((~/Org/University.org :maxlevel . 2) (~/Org/Personal.org :maxlevel . 1))

***** Org Capture

      Org capture is something that I have always dreamed of having
      on my computer. Not just for quick scheduling, but also for
      quick notes. For someone who has always been journaling, this
      falls well with the routine.

      #+begin_src emacs-lisp
	(global-set-key (kbd "C-c l") 'org-store-link)
	(global-set-key (kbd "C-c c") 'org-capture)
      #+end_src

***** Important Behaviors

      toggling extra functionalities that
      are not on by default

      #+begin_src emacs-lisp
	(setq org-agenda-start-with-log-mode t)
	(setq org-log-done 'time)
	(setq org-ellipsis "⤵")
	(setq org-log-done t)
	(setq org-log-into-drawer t)
      #+end_src

***** Extra Configurations

      Things I changed probably because 
      did not like that much.

      #+begin_src emacs-lisp
	(setq org-hide-emphasis-markers t)
	(setq org-image-actual-width nil)
	(eval-after-load 'org
	  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
	(setq org-comfim-babel-evaluate nil)
      #+end_src

***** Org Agenda Custom

      #+begin_src emacs-lisp
	(setq org-agenda-custom-commands
	      '(("U" "Agenda & University"
		 ((agenda "")
		  (tags-todo "@University+Study-DONE")
		  (tags "+Level=4+Projects-DONE")))
		("P" "Agenda & Personal"
		 ((agenda "")
		  (tags-todo "@Personal-DONE")
		  (tags "+Level=3+Books")
		  (tags "+Level=3+Series")
		  (tags "+Level=3+Anime")
		  ))))
      #+end_src

*** Dired
    
    Using Dired+ instead of regular dired, with the addition 
    of some icons, and some extra things.

    #+begin_src emacs-lisp
      (require 'dired+)
      (use-package treemacs-icons-dired
	:after treemacs dired
	:ensure t
	:config (treemacs-icons-dired-mode))
      (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)

      (defadvice dired-subtree-toggle (after add-icons activate) (treemacs-icons-dired--display))
      (defadvice dired-subtree-toggle (after add-icons activate) (revert-buffer))
    #+end_src
    
    Due to some not so pleasing colors, I have to 
    define some variables to be null.

    #+begin_src emacs-lisp
      (customize-set-variable 'diredp-dir-name t nil)
      (customize-set-variable 'diredp-dir-heading t nil)
      (customize-set-variable 'diredp-file-name t nil)
      (customize-set-variable 'diredp-file-suffix t nil)
    #+end_src

*** Prettify

    #+begin_src emacs-lisp
      (global-prettify-symbols-mode 1)
	   (defun add-pretty-lambda ()
	      (setq prettify-symbols-alist
		    '(
		      ("lambda" . 955)
		      ("epsilon" . 120518)
		      ("->" . 8594)
		      ("Wking" . 9812)
		      ("WQueen" . 9813)
		      ("WRook" . 9814)
		      ("WBishop" . 9815)
		      ("WKnight" . 9816)
		      ("WPawn" . 9817)
		      ("!sum" . ?∑)
		      ("<=" . 8804)
		      (">=" . 8805)
		      ("=>" . ?➡)
		      ("#+BEGIN_SRC"     . "λ")
		      ("#+END_SRC"       . "λ")
		      ("#+begin_src"     . "λ")
		      ("#+end_src"       . "λ")
		      )))
	   (add-hook 'prog-mode-hook 'add-pretty-lambda)
	   (add-hook 'org-mode-hook 'add-pretty-lambda)
    #+end_src

*** Youtube-dl

    Youtube dl is a really good tool to get video from the Internet 
    into my computer. Any sort of video! From any site!

    #+begin_src emacs-lisp
      (require 'ytdl)
      (ytdl-add-field-in-download-type-list "Music"
						  "m"
						  (expand-file-name "~/Music")
						  nil)
    #+end_src

*** Elfeed
    
    Need to change some stuff (put things on a org file)
    
    #+begin_src emacs-lisp
       (setq elfeed-feeds
		  '(("https://www.youtube.com/feeds/videos.xml?channel_id=UCnkp4xDOwqqJD7sSM3xdUiQ" Adam Neely YT)
		    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-lHJZR3Gqxm24_Vd_AJ5Yw" Pewdiepie YT)
		    ("https://videos.lukesmith.xyz/feeds/videos.xml?sort=-publishedAt&filter=local" Luke Smith TB))
		  )
    #+end_src

*** Writing Mode

    To write files and general text, including code, I prefer 
    to have my text centered on one only buffer.

    #+begin_src emacs-lisp
      (require 'olivetti)
      (olivetti-set-width 60)
      (olivetti-mode 1)

      (global-set-key (kbd "C-c o") 'olivetti-mode)
      (global-set-key (kbd "C-c r") 'writeroom-mode)
    #+end_src
** Terminals
*** Eshell Configurations
**** Alias
     
     making find file, and find-
     file-other-window easy to
     use.

     #+begin_src emacs-lisp
     (defalias 'ff 'find-file)
     (defalias 'ffo 'find-file-other-window)
     #+end_src
**** Eshell Prompt

     Making the eshell prompt look
     different.

     #+begin_src emacs-lisp
       (setq 
	eshell-prompt-regexp
	"^[^λ]+ λ ")
       (setq eshell-prompt-function
	     (lambda ()
	       (concat
		(format-time-string
		 "%Y-%m-%d" (current-time))
		(if
		    (= (user-uid) 0) " # " " λ "))))
     #+end_src
**** Eshell showing up

     They way eshell pops can be changed
     #+begin_src emacs-lisp
       (defun eshell-other-window ()
	 "Open a `shell' in a new window."
	 (interactive)
	 (let ((buf (eshell)))
	   (switch-to-buffer (other-buffer buf))
	   (switch-to-buffer-other-window buf)))
     #+end_src
     
     Rebind it to key combo
     #+begin_src emacs-lisp
       (global-set-key (kbd "M-s e")
		       'eshell-other-window)
     #+end_src

*** Windows CMD

    eshell doesn't always do everything
    like a terminal it's supposed. there
    are some chars that don't work like
    I was expecting. This can be changed
    but at the same time I might just be
    making a cmd terminal program!

    #+begin_src emacs-lisp
      (defun start-cmd ()
	(interactive)
	(let ((proc (start-process "cmd" nil "cmd.exe" "/C" "start" "\"---\"" "cmd.exe")))
	  (set-process-query-on-exit-flag proc nill)))
    #+end_src

*** Windows Terminal

    Start the windows terminal from anywhere! this is generally very
    helpful to me since eshell has quite a lot of laking features.
    (laking features supported by default, and since I already spent
    time configuring my terminal, might as well just use it).

    #+begin_src emacs-lisp
      (defun start-wt ()
	(interactive)
	(let ((proc (start-process "windows terminal" nil "wt.exe" "-f" "-d" ".")))))
    #+end_src

*** Explorer

    Sometimes I need to check things with something other than dired.
    Although I basically don't use it, it's still okay If I need to
    upload files.

    #+begin_src emacs-lisp
      (defun Explorer ()
	(interactive)
	(let ((proc (start-process "Windows Explorer" nil "explorer.exe" ".")))))
    #+end_src

*** VS Code

    I don't use VS code at all. A friend of mine convinced me to
    install it, and I did. This was and is mainly for a simple
    reason. If I ever need to help someone with debugging, and that
    someone uses VS code, (due to it's popularity), I might as well
    take advantage of live sharing.

    #+begin_src emacs-lisp
      (defun VScode ()
	(interactive)
	(let ((proc (start-process "VS Code" nil "code" (buffer-file-name))))))
    #+end_src

    #+RESULTS:
    : VScode

* Programming Languages
** Java

   For Java I am currently making
   use of gradle. I have been learning
   to use the JADE multi-agent systems
   framework.

   #+begin_src emacs-lisp
   (add-hook 'java-mode-hook 'gradle-mode)
   #+end_src
   
   #+begin_src emacs-lisp
     (custom-set-variables
      '(jdee-server-dir "~\\.emacs.d\\jdee-server"))
   #+end_src

   #+RESULTS:

** Common Lisp

   I currently have both gnu Clisp and
   SBCL installed on my computer. SBCL
   seems to have a better integration, so
   I choose to go with it

   #+begin_src emacs-lisp
     (setq inferior-lisp-program "sbcl")
     (add-hook 'lisp-mode-hook #'enable-paredit-mode)
     (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
   #+end_src

** Python

   Well Python has quite a couple
   of things to set up. This is
   basically because in the end
   I am just a python programmer.

*** Elpy
    
    #+begin_src emacs-lisp
      (use-package elpy
	:ensure t
	:init
	(elpy-enable))
    #+end_src

*** Ein

    #+begin_src emacs-lisp
      (use-package ein
	:ensure t
	:init
	:config (require 'ein)
	(require 'ein-notebook))
      (customize-set-variable 'ein:output-area-inlined-images t)
    #+end_src

*** Load Flymake

    #+begin_src emacs-lisp
      (when (load "flymake" t)
	(add-to-list 'flymake-allowed-file-name-masks
		     '("\\.py\\'" flymake-pyflakes-init)))

    #+end_src

*** Python Interpreter

    #+begin_src emacs-lisp
      (setq python-shell-interpreter "python"
	    python-shell-interpreter-args "-i")
    #+end_src

    #+RESULTS:
    : -i

*** Virtual Environments

    #+begin_src emacs-lisp
      (setenv "WORKON_HOME" "c:/Users/afons/py_home")
    #+end_src
** Sparql

   Sparql is quite a very interesting
   thing to play with. The whole Semantic
   web is a very, very interesting thing

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.sparql$" . sparql-mode))
     (add-to-list 'auto-mode-alist '("\\.rq$" . sparql-mode))
     (add-hook 'sparql-mode-hook 'auto-complete-mode)
   #+end_src

** Latex

   Might not be a programming language
   but Latex is a very, very good
   formatting language.

   #+begin_src emacs-lisp
     (require 'latex)
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	   TeX-source-correlate-start-server t)
     (add-hook 'TeX-after-compilation-finished-functions
		#'TeX-revert-document-buffer)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.9))
     (put 'dired-find-alternate-file 'disabled nil)
     (add-hook 'text-mode-hook 'flyspell-mode)
   #+end_src
** Haskell

   After being a Python and C programmer
   I would like to become a functional
   programmer. What that means in the
   end is basically to write programs
   in haskell without ever printing nothing
   to the terminal!

   #+begin_src emacs-lisp
   (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
   #+end_src
** Freest
   
  Freest is a programming language developed
  in my faculty. It's basically haskell but
  with parallelization in mind.

   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/freest-mode/")
     (require 'freest-mode)
     (add-to-list 'auto-mode-alist '("\\.fst\\'" . freest-mode))
   #+end_src

** Processing

   #+begin_src emacs-lisp
   (setq processing-location "c:/processing-3.5.4/processing-java.exe")
   #+end_src
   
** C Programming
   Clang variables to find the MinGW
   header files.
   #+begin_src emacs-lisp
     (setq company-clang-arguments . ("-IC:\\MinGW\\include"))
   #+end_src

** JavaScript
*** Better JavaScript
   #+begin_src emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
   #+end_src
*** JavaScript REPL
    #+begin_src emacs-lisp
      (add-hook 'js-mode-hook
		(lambda ()
		  (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
		  (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
		  (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
		  (define-key js-mode-map (kbd "C-c C-c") 'nodejs-repl-send-buffer)
		  (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
		  (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
    #+end_src
** TypeScript
   #+begin_src emacs-lisp
     (defun setup-tide-mode ()
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1)
       (company-mode +1)
       (setq company-idle-delay 0))

     ;; aligns annotation to the right hand side
     (setq company-tooltip-align-annotations t)

     ;; formats the buffer before saving
     (add-hook 'before-save-hook 'tide-format-before-save)

     (add-hook 'typescript-mode-hook #'setup-tide-mode)
   #+end_src

** Prolog
   
   #+begin_src emacs-lisp
     (require 'ediprolog)
     (autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
     (autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
     (setq prolog-program-name "C:/swipl/bin/swipl.exe")
     (setq ediprolog-program "C:\\swipl\\bin\\swipl.exe")
     ;(setq ediprolog-program-switches '("-g" "set_prolog_flag(tty_control, false)"))
     ;(setq ediprolog-program-switches '("-g" "set_prolog_flag(readline, false)"))
     (setq prolog-system 'swi)
     (add-to-list 'auto-mode-alist '("\\.pl\\'" . prolog-mode))
     (global-set-key [f10] 'ediprolog-dwim)
   #+end_src

** Golang
   Stuff to program in golang in a more
   comfortable manner.

   #+begin_src emacs-lisp
     (use-package go-mode
       :mode "\\.go$"
       :interpreter "go"
       :init
       (add-hook 'go-mode-hook 'auto-complete-mode)
       )
   #+end_src

* General Settings
** Basic Additions & Removing Bars
*** Styling Of Emacs

    Emacs style I am currently using.
    Might be something quite more
    personalized, or just some random
    thing I found on the Internet.

    #+begin_src emacs-lisp
    (load "~/.emacs.d/elegant-emacs/elegance.el")
    #+end_src
*** Removing Bars & Bells

   First we remove unnecessary
   bars that (in my opinion) take 
   screen space that I would rather
   use for other things. Also deactivate
   bells, which are active by default.

   #+begin_src emacs-lisp
   (scroll-bar-mode 0)
   (menu-bar-mode 0)
   (tool-bar-mode 0)
   (setq visible-bell t)
   #+end_src

*** Paths & Loading Files

   Make the default directory the
   windows %HOME% which has to be
   defined by the computer user on
   the windows machine
      
   #+begin_src emacs-lisp
     (setq default-directory (concat (getenv "HOME") "/"))
   #+end_src

*** Screen & Fonts
   I enjoy when the screen starts
   full, since I use it like that
   most of the time.

   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist 
		  '(fullscreen . fullboth))
   #+end_src

   The font I've been using is the
   /Consolas/ font, not because I have
   any particular affection for it,
   I just happened to find it easy
   to read.

   #+begin_src emacs-lisp
     (set-face-attribute
      'default nil
      :font "Consolas 17" )
   #+end_src

   #+RESULTS:

*** Time & Battery

    Since I spend so much time inside
    emacs, I do like to see the battery
    and the clock as well

    #+begin_src emacs-lisp
    (display-time-mode 1)
    (display-battery-mode 1)
    #+end_src

*** Key Substitution
**** Killing Buffers

    Defining two different ways of
    deleting buffers, one where we
    can select what buffer to delete
    and the other where we just
    delete the one we are in.
    The custom function was made in
    case I ever feel uncomfortable with
    the way I setup the buffer deletion.

    #+begin_src emacs-lisp
      (defun custom/kill-this-buffer ()
	(interactive) (kill-buffer (current-buffer)))

      (global-set-key (kbd "C-x k")
		      'kill-buffer-and-window)

      (global-set-key (kbd "C-c k")
		      'kill-buffer)

    #+end_src

**** Window resizing

     key bindings for resizing windows!

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
       (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
       (global-set-key (kbd "C-S-<down>") 'shrink-window)
       (global-set-key (kbd "C-S-<up>") 'enlarge-window)
     #+end_src

**** White Space
     
     #+begin_src emacs-lisp
     (global-set-key (kbd "<f6>") 'whitespace-mode)
     #+end_src

**** Deleting Text

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-d") 'delete-region)
     #+end_src

*** Emacs Encodings

    I must confess I don't understand
    much of the following code, but I
    do think that UTF-8 means good? and
    other thing that is not UTF-8 means
    bad? I dunno.... I just know that
    utf-8 displays all the characters I
    want and need.

    #+begin_src emacs-lisp
      (setq utf-translate-cjk-mode nil)
      (set-language-environment "UTF-8")
      (setq locale-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-terminal-coding-system 'utf-8)
      (set-selection-coding-system
       (if (eq system-type 'windows-nt)
	    'utf-16-le
	  'utf-8))
      (prefer-coding-system 'utf-8)
    #+end_src

*** Backing & File Destiny

    Backing up files on a special
    directory, so that if something
    goes horribly wrong I can still
    have them back.

    #+begin_src emacs-lisp
      (setq backup-by-copying t
	    backup-directory-alist '(("." . "~/.saves/"))
	    delete-old-versions t
	    kept-new-versions 6
	    kept-old-versions 2
	    version-control t)
    #+end_src
** Splash Screen & Starting Scratch
*** Splash Screen

   Inhibiting the default splash screen
   from appearing, and changing the text
   displayed on the scratch file.

   #+begin_src emacs-lisp
     (setq inhibit-startup-screen t)
     (setq initial-major-mode 'text-mode)
     (setq initial-scratch-message 
	   "Present Day, Present Time...\n")
   #+end_src
